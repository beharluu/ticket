{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nlet SubtaskListComponent = class SubtaskListComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.taskChecked = 0;\n    this.subTasks = [{\n      checked: true,\n      title: 'Send invoice to collections agency'\n    }, {\n      checked: false,\n      title: 'Write an email to them to follow-up'\n    }, {\n      checked: false,\n      title: 'Send paper mail to account'\n    }, {\n      checked: true,\n      title: `This is my new subtask... I'm autofocused here when I add a subtask`\n    }];\n    this.tasksForm = this.fb.group({\n      tasks: this.fb.array([this.createTask('Default Task 1', true), this.createTask('Default Task 2', false)])\n    });\n    this.countTaskCheck();\n  }\n  createTask(name, checked) {\n    return this.fb.group({\n      name: new FormControl(name),\n      checked: new FormControl(checked) // Default value for checked\n    });\n  }\n\n  get tasks() {\n    return this.tasksForm.get('tasks');\n  }\n  addTask() {\n    this.tasks.push(this.createTask('', false)); // Add new task with empty name\n  }\n\n  submitTasks() {\n    console.log(this.tasksForm.value); // Log the current value of the form\n  }\n\n  changeCheckStatus(index) {\n    const taskControl = this.tasks.at(index);\n    const checkedControl = taskControl.get('checked');\n    if (checkedControl) {\n      const currentCheckedValue = checkedControl.value;\n      checkedControl.setValue(!currentCheckedValue);\n    }\n    this.countTaskCheck();\n  }\n  countTaskCheck() {\n    this.taskChecked = this.tasks.controls.filter(task => task.value.checked).length;\n  }\n};\nSubtaskListComponent = __decorate([Component({\n  selector: 'app-subtask-list',\n  templateUrl: './subtask-list.component.html',\n  styleUrls: ['./subtask-list.component.scss']\n})], SubtaskListComponent);\nexport { SubtaskListComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,WAAW,QAAmB,gBAAgB;AAOxE,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAK/BC,YAAoBC,EAAe;IAAf,OAAE,GAAFA,EAAE;IAFtB,gBAAW,GAAW,CAAC;IAgCvB,aAAQ,GAAG,CACT;MACEC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;KACR,EACD;MACED,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;KACR,EACD;MACED,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;KACR,EACD;MACED,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;KACR,CACF;IA9CC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC7BC,KAAK,EAAE,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,EACvC,IAAI,CAACA,UAAU,CAAC,gBAAgB,EAAE,KAAK,CAAC,CACzC;KACF,CAAC;IACF,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAD,UAAU,CAACE,IAAY,EAAER,OAAgB;IACvC,OAAO,IAAI,CAACD,EAAE,CAACI,KAAK,CAAC;MACnBK,IAAI,EAAE,IAAIZ,WAAW,CAACY,IAAI,CAAC;MAC3BR,OAAO,EAAE,IAAIJ,WAAW,CAACI,OAAO,CAAC,CAAC;KACnC,CAAC;EACJ;;EAEA,IAAII,KAAK;IACP,OAAO,IAAI,CAACF,SAAS,CAACO,GAAG,CAAC,OAAO,CAAc;EACjD;EAEAC,OAAO;IACL,IAAI,CAACN,KAAK,CAACO,IAAI,CAAC,IAAI,CAACL,UAAU,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;EAC/C;;EAEAM,WAAW;IACTC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,SAAS,CAACa,KAAK,CAAC,CAAC,CAAC;EACrC;;EAsBAC,iBAAiB,CAACC,KAAa;IAC7B,MAAMC,WAAW,GAAG,IAAI,CAACd,KAAK,CAACe,EAAE,CAACF,KAAK,CAAC;IACxC,MAAMG,cAAc,GAAGF,WAAW,CAACT,GAAG,CAAC,SAAS,CAAC;IAEjD,IAAIW,cAAc,EAAE;MAClB,MAAMC,mBAAmB,GAAGD,cAAc,CAACL,KAAK;MAChDK,cAAc,CAACE,QAAQ,CAAC,CAACD,mBAAmB,CAAC;;IAE/C,IAAI,CAACd,cAAc,EAAE;EACvB;EAEAA,cAAc;IACZ,IAAI,CAACgB,WAAW,GAAG,IAAI,CAACnB,KAAK,CAACoB,QAAQ,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACX,KAAK,CAACf,OAAO,CAAC,CAAC2B,MAAM;EAClF;CAED;AArEY9B,oBAAoB,eALhCF,SAAS,CAAC;EACTiC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWjC,oBAAoB,CAqEhC;SArEYA,oBAAoB","names":["Component","FormControl","SubtaskListComponent","constructor","fb","checked","title","tasksForm","group","tasks","array","createTask","countTaskCheck","name","get","addTask","push","submitTasks","console","log","value","changeCheckStatus","index","taskControl","at","checkedControl","currentCheckedValue","setValue","taskChecked","controls","filter","task","length","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/beharlushaku/Desktop/Angular Projects/ticket/src/app/shared/subtask-list/subtask-list.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-subtask-list',\n  templateUrl: './subtask-list.component.html',\n  styleUrls: ['./subtask-list.component.scss']\n})\nexport class SubtaskListComponent {\n\n  tasksForm: FormGroup;\n  taskChecked: number = 0;\n\n  constructor(private fb: FormBuilder) {\n    this.tasksForm = this.fb.group({\n      tasks: this.fb.array([\n        this.createTask('Default Task 1', true),\n        this.createTask('Default Task 2', false)\n      ])\n    });\n    this.countTaskCheck();\n  }\n\n  createTask(name: string, checked: boolean): FormGroup {\n    return this.fb.group({\n      name: new FormControl(name),  // Default value for name\n      checked: new FormControl(checked) // Default value for checked\n    });\n  }\n\n  get tasks(): FormArray {\n    return this.tasksForm.get('tasks') as FormArray;\n  }\n\n  addTask() {\n    this.tasks.push(this.createTask('', false)); // Add new task with empty name\n  }\n\n  submitTasks() {\n    console.log(this.tasksForm.value); // Log the current value of the form\n  }\n\n\n  subTasks = [\n    {\n      checked: true,\n      title: 'Send invoice to collections agency'\n    },\n    {\n      checked: false,\n      title: 'Write an email to them to follow-up'\n    },\n    {\n      checked: false,\n      title: 'Send paper mail to account'\n    },\n    {\n      checked: true,\n      title: `This is my new subtask... I'm autofocused here when I add a subtask`\n    }\n  ]\n\n  changeCheckStatus(index: number) {\n    const taskControl = this.tasks.at(index);\n    const checkedControl = taskControl.get('checked');\n\n    if (checkedControl) {\n      const currentCheckedValue = checkedControl.value;\n      checkedControl.setValue(!currentCheckedValue);\n    }\n    this.countTaskCheck()\n  }\n\n  countTaskCheck() {\n    this.taskChecked = this.tasks.controls.filter(task => task.value.checked).length;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}